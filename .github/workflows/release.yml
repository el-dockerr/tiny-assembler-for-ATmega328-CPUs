name: Create Release

on:
  # Trigger the workflow when a new tag is pushed
  push:
    tags:
      - 'v*.*.*'  # Matches tags like v1.0.0, v2.1.3, etc.

  # Optionally, allow manual triggering via the GitHub UI
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set Up the Build Environment
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      # Step 3: Configure the Project
      - name: Configure CMake
        run: cmake -B build

      # Step 4: Build the Project
      - name: Build Project
        run: cmake --build build --config Release

      # Step 5: Verify Binaries
      - name: Verify Binary
        run: |
          cd build
          if [ -f "ATmega328Compiler" ]; then
            echo "Binary successfully created"
            chmod +x ATmega328Compiler
          else
            echo "Binary not found"
            exit 1
          fi

      # Step 6: Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ### Changes
            - Describe the changes or refer to commit history.
          draft: false
          prerelease: false

      # Step 7: Upload Release Assets
      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/ATmega328Compiler
          asset_name: ATmega328Compiler_${{ github.ref_name }}_linux
          asset_content_type: application/octet-stream

      - name: Upload HEX File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/examples/minimal_led_test.hex
          asset_name: minimal_led_test_${{ github.ref_name }}.hex
          asset_content_type: application/octet-stream

      - name: Upload BIN File
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build/examples/minimal_led_test.bin
          asset_name: minimal_led_test_${{ github.ref_name }}.bin
          asset_content_type: application/octet-stream
          